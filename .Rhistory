filter(!is.na(pid_1) & is.na(pid_2)) |>
mutate(pid = pid_1, pname=pname_1, cid = cid_1, cname=cname_1) |>
select(pid,pname,cid,cname,data)
View(d3)
View(d3)
runApp('module/folder_loader.R')
View(d3)
View(tagdat2)
View(joined)
#(1) check order
d1 <- joined |>
filter(!is.na(pid_1) & !is.na(pid_2)) |>
mutate(pid = pid_2, pname=pname_2, cid = cid_2, cname=cname_2) |>
select(pid,pname,cid,cname,data)
View(d1)
View(d2)
View(d3)
updated_rdsdata <- bind_rows(d1,d2d3)
updated_rdsdata <- bind_rows(d1,d2,d3)
rm(list=ls())
rm(list=ls())
rdsdat <- read_rds(r"(C:\Users\ma060\Desktop\pdfs\research_matrix_data.rds)")
tagdat <- readxl::read_excel(r"(C:\Users\ma060\Desktop\pdfs\tag.xlsx)")
#make tagdat to longer format
tagdat2 <- map_dfr(1:ncol(tagdat),~{
num <- .
acol <- tagdat[,num]
cnamevec <- acol[[1]][!is.na(acol[[1]])]
if(length(cnamevec)==0){
cnamevec <- ".default"
}else{
cnamevec <-  c(".default", cnamevec)
}
cidvec <- formatC(0:(length(cnamevec)-1),width=2,flag="0")
tibble(
pid     = formatC(num,width=3,flag="0"),
pname   = colnames(acol),
cid     = cidvec,
cname   = cnamevec
)
})
#nestrds dat
rdsdat2 <- rdsdat |>
group_by(pid,pname,cid,cname) |>
nest()
joined <- rdsdat2 |>
full_join(tagdat2,
by=c("pname","cname"),
suffix=c("_1","_2"),
keep = TRUE)
#(1) check order
d1 <- joined |>
filter(!is.na(pid_1) & !is.na(pid_2)) |>
mutate(pid = pid_2, pname=pname_2, cid = cid_2, cname=cname_2) |>
select(pid,pname,cid,cname,data)
#(2)
d2 <- joined |>
filter(is.na(pid_1) & !is.na(pid_2)) |>
mutate(pid = pid_2, pname=pname_2, cid = cid_2, cname=cname_2) |>
select(pid,pname,cid,cname,data)
#(3)
d3 <- joined |>
filter(!is.na(pid_1) & is.na(pid_2)) |>
mutate(pid = pid_1, pname=pname_1, cid = cid_1, cname=cname_1) |>
select(pid,pname,cid,cname,data) |>
mutate(pid = "removed", cid = "removed")
updated_rdsdata <- bind_rows(d1,d2,d3)
updated_rdsdata
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid.cid)
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid)
updated_rdsdata
pdfs <- list.files(r"(C:\Users\ma060\Desktop\pdfs\)",pattern = "pdf$")
View(updated_rdsdata)
View(d1)
View(d1[[5]][[1]])
updated_rdsdata
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
browser()
}))
.
tibble(pdfname = pdfs)
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
adata <- .
if(is.null(adata)){
res <- tibble(pdfname = pdfs, val ="")
}else{
browser()
}
}))
adata
#check if new pdf file added from past
adata$pdfname
#check if new pdf file added from past
adata$pdfname %in% pdfs
#check if new pdf file added from past
is_exist <- pdfs %in% adata$pdfname
is_exist
#add if not exist
pdfs[is_exist]
#add if not exist
pdfs[!is_exist]
tibble(pdfname = pdfs_not_exist, val="")
#add if not exist
pdfs_not_exist <- pdfs[!is_exist]
pdfs_not_exist
tibble(pdfname = pdfs_not_exist, val="")
adata |>
add_row( tibble(pdfname = pdfs_not_exist, val="") )
adata
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
adata <- .
if(is.null(adata)){
res <- tibble(pdfname = pdfs, val ="")
}else{
#check if new pdf file added from past
is_exist <- pdfs %in% adata$pdfname
#add if not exist
pdfs_not_exist <- pdfs[!is_exist]
res <- adata |>
add_row( tibble(pdfname = pdfs_not_exist, val="") )
}
return(res)
}))
updated_rdsdata
View(updated_rdsdata)
View(updated_rdsdata[[5]][[21]])
#also, update tag.xlsx include removed tag names
updated_resdata |>
select(pid,pname,cide,cname)
#also, update tag.xlsx include removed tag names
updated_rdsdata |>
select(pid,pname,cide,cname)
#also, update tag.xlsx include removed tag names
updated_rdsdata |>
select(pid,pname,cid,cname)
#save this data as new rds data
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
adata <- .
if(is.null(adata)){
res <- tibble(pdfname = pdfs, val ="")
}else{
#check if new pdf file added from past
is_exist <- pdfs %in% adata$pdfname
#add if not exist
pdfs_not_exist <- pdfs[!is_exist]
res <- adata |>
add_row( tibble(pdfname = pdfs_not_exist, val="") )
}
return(res)
})) |>
unnest(data)
updated_rdsdata
runApp('module/folder_loader.R')
tgtdir <- r("C:\Users\ma060\Desktop\pdfs)
tgtdir
tgtdir
tgtdir <- r("C:\Users\ma060\Desktop\pdfs)
tgtdir <- r("C:\Users\ma060\Desktop\pdfs)
tgtdir <- r("C:\Users\ma060\Desktop\pdfs")
tgtdir <- r("C:\Users\ma060\Desktop\pdfs)"
#
tgtdir <- r"(C:\Users\ma060\Desktop\pdfs)"
tgtdir
tgtrds <- list.files(tgtdir,"research_matrix_data.rds")
tgtrds
#prepare variables-----------------
pdfs   <- list.files(tgtdir,pattern = "pdf$")
tgtrds <- list.files(tgtdir,"research_matrix_data.rds")
rm(list=ls())
#prepare variables-----------------
pdfs   <- list.files(tgtdir,pattern = "pdf$")
tgtrds <- list.files(tgtdir,"research_matrix_data.rds")
tgtdir <- r"(C:\Users\ma060\Desktop\pdfs)"
#prepare variables-----------------
pdfs   <- list.files(tgtdir,pattern = "pdf$")
tgtrds <- list.files(tgtdir,"research_matrix_data.rds")
#read rds file and tag file
rdsdat <- read_rds(file.path(tgtdir,tgtrds))
rdsdat
tagdat <- readxl::read_excel(file.path(tgtdir,"tag.xlsx"))
tagdat
tagdat2 <- map_dfr(1:ncol(tagdat),~{
num <- .
acol <- tagdat[,num]
cnamevec <- acol[[1]][!is.na(acol[[1]])]
if(length(cnamevec)==0){
cnamevec <- ".default"
}else{
cnamevec <-  c(".default", cnamevec)
}
cidvec <- formatC(0:(length(cnamevec)-1),width=2,flag="0")
tibble(
pid     = formatC(num,width=3,flag="0"),
pname   = colnames(acol),
cid     = cidvec,
cname   = cnamevec
)
})
View(tagdat2)
#nestrds dat
rdsdat2 <- rdsdat |>
group_by(pid,pname,cid,cname) |>
nest()
View(rdsdat2)
joined <- rdsdat2 |>
full_join(tagdat2,
by=c("pname","cname"),
suffix=c("_1","_2"),
keep = TRUE)
joined
#(1) check order
d1 <- joined |>
filter(!is.na(pid_1) & !is.na(pid_2)) |>
mutate(pid = pid_2, pname=pname_2, cid = cid_2, cname=cname_2) |>
select(pid,pname,cid,cname,data)
#(2)
d2 <- joined |>
filter(is.na(pid_1) & !is.na(pid_2)) |>
mutate(pid = pid_2, pname=pname_2, cid = cid_2, cname=cname_2) |>
select(pid,pname,cid,cname,data)
#(3)
d3 <- joined |>
filter(!is.na(pid_1) & is.na(pid_2)) |>
mutate(pid = pid_1, pname=pname_1, cid = cid_1, cname=cname_1) |>
select(pid,pname,cid,cname,data) |>
mutate(pid = "removed", cid = "removed")
View(d1)
rdsdat2
View(rdsdat2)
View(tagdat2)
View(tagdat2)
joined <- rdsdat2 |>
full_join(tagdat2,
by=c("pname","cname"),
suffix=c("_1","_2"),
keep = TRUE)
View(joined)
#(1) check order
d1 <- joined |>
filter(!is.na(pid_1) & !is.na(pid_2)) |>
mutate(pid = pid_2, pname=pname_2, cid = cid_2, cname=cname_2) |>
select(pid,pname,cid,cname,data)
joined |>
filter(is.na(pid_1) & !is.na(pid_2)) |>
mutate(pid = pid_2, pname=pname_2, cid = cid_2, cname=cname_2)
joined |>
filter(is.na(pid_1) & !is.na(pid_2))
joined
d3 <- joined |>
filter(!is.na(pid_1) & is.na(pid_2))
View(d3)
View(d3)
d3 <- joined |>
filter(!is.na(pid_1) & is.na(pid_2)) |>
mutate(pid = pid_1, pname=pname_1, cid = cid_1, cname=cname_1) |>
select(pid,pname,cid,cname,data)
d3 <- joined |>
filter(!is.na(pid_1) & is.na(pid_2)) |>
mutate(pid = pid_1, pname=pname_1, cid = cid_1, cname=cname_1) |>
select(pid,pname,cid,cname,data) |>
mutate(pid = "removed", cid = "removed")
d3
#save this data as new rds data
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
adata <- .
if(is.null(adata)){
res <- tibble(pdfname = pdfs, val ="")
}else{
#check if new pdf file added from past
is_exist <- pdfs %in% adata$pdfname
#add if not exist
pdfs_not_exist <- pdfs[!is_exist]
res <- adata |>
add_row( tibble(pdfname = pdfs_not_exist, val="") )
}
return(res)
})) |>
unnest(data)
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
adata <- .
if(is.null(adata)){
res <- tibble(pdfname = pdfs, val ="")
}else{
#check if new pdf file added from past
is_exist <- pdfs %in% adata$pdfname
#add if not exist
pdfs_not_exist <- pdfs[!is_exist]
res <- adata |>
add_row( tibble(pdfname = pdfs_not_exist, val="") )
}
return(res)
}))
View(updated_rdsdata)
View(updated_rdsdata[[5]][[1]])
View(updated_rdsdata[[5]][[23]])
#save this data as new rds data
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
adata <- .
if(is.null(adata)){
res <- tibble(pdfname = pdfs, val ="")
}else{
#check if new pdf file added from past
is_exist <- pdfs %in% adata$pdfname
#add if not exist
pdfs_not_exist <- pdfs[!is_exist]
res <- adata |>
add_row( tibble(pdfname = pdfs_not_exist, val="") )
}
return(res)
})) |>
unnest(data)
write_rds(updated_rdsdata, file.path(tgtdir,tgtrds))
updated_rdsdata
#make removed tag xlsx
updated_rdsdata |>
filter(pid == "removed" | cid == "removed")
#save this data as new rds data
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
adata <- .
if(is.null(adata)){
res <- tibble(pdfname = pdfs, val ="")
}else{
#check if new pdf file added from past
is_exist <- pdfs %in% adata$pdfname
#add if not exist
pdfs_not_exist <- pdfs[!is_exist]
res <- adata |>
add_row( tibble(pdfname = pdfs_not_exist, val="") )
}
return(res)
}))
updated_rdsdata
removed_tag <- updated_rdsdata |>
unnest(data)
removed_tag
removed_tag <- updated_rdsdata |>
filter(pid == "removed" | cid == "cid")
removed_tag
removed_tag <- updated_rdsdata |>
filter(pid == "removed" | cid == "cid") |>
select(!data)
updated_rdsdata <- updated_rdsdata |>
unnest(data)
write_rds(updated_rdsdata, file.path(tgtdir,tgtrds))
#make removed tag xlsx
openxlsx::write.xlsx(removed_tag,file.path(tgtdir,"removedtag.xlsx"))
removed_tag <- updated_rdsdata |>
filter(pid == "removed" | cid == "cid") |>
select(pname, cname)
#make removed tag xlsx
openxlsx::write.xlsx(removed_tag,file.path(tgtdir,"removedtag.xlsx"))
removed_tag <- updated_rdsdata |>
filter(pid == "removed" | cid == "cid") |>
select(!data) |>
select(pname, cname)
#make removed tag xlsx
openxlsx::write.xlsx(removed_tag,file.path(tgtdir,"removedtag.xlsx"))
removed_tag
removed_tag <- updated_rdsdata |>
filter(pid == "removed" | cid == "cid") |>
select(!data) |>
select(pname, cname)
removed_tag
updated_rdsdata
#save this data as new rds data
updated_rdsdata <- bind_rows(d1,d2,d3) |>
arrange(pid,cid) |>
mutate(data = map(data, ~{
adata <- .
if(is.null(adata)){
res <- tibble(pdfname = pdfs, val ="")
}else{
#check if new pdf file added from past
is_exist <- pdfs %in% adata$pdfname
#add if not exist
pdfs_not_exist <- pdfs[!is_exist]
res <- adata |>
add_row( tibble(pdfname = pdfs_not_exist, val="") )
}
return(res)
}))
removed_tag <- updated_rdsdata |>
filter(pid == "removed" | cid == "cid") |>
select(!data) |>
select(pname, cname)
removed_tag
#make removed tag xlsx
openxlsx::write.xlsx(removed_tag,file.path(tgtdir,"removedtag.xlsx"),overwrite = TRUE)
updated_rdsdata
updated_rdsdata <- updated_rdsdata |>
unnest(data)
write_rds(updated_rdsdata, file.path(tgtdir,tgtrds))
#make removed tag xlsx
openxlsx::write.xlsx(removed_tag,file.path(tgtdir,"removedtag.xlsx"),overwrite = TRUE)
runApp('module/folder_loader.R')
runApp()
source(here::here("module\tag_rds_process_function.R"))
source(here::here("module/tag_rds_process_function.R"))
runApp('module/folder_loader.R')
runApp()
runApp()
?shinyDirChoose
c(Home = fs::path_home(), "R Installation" = R.home(), getVolumes()())
runApp('module/folder_loader.R')
runApp()
#check if prevpath.txt exist
file.exists("prevpath.txt")
#check if prevpath.txt exist
if(file.exists("prevpath.txt")) prevpath <- read_lines("prevpath.txt")
prevpath
read_lines("prevpath.txt")
runApp('module/folder_loader.R')
runApp()
prevpath
prevpath
read_lines("prevpath.txt")
read_lines(here::here("prevpath.txt"))
read_lines("prevpath.txt")
runApp('module/folder_loader.R')
runApp('module/folder_loader.R')
runApp()
prevpath
file.exists("prevpath.txt")
runApp('module/folder_loader.R')
tgtdir <- r"(C:\Users\ma060\Desktop\test)"
#prepare variables-----------------
pdfs   <- list.files(tgtdir,pattern = "pdf$")
#prepare variables-----------------
pdfs   <- list.files(tgtdir,pattern = "pdf$")
pdfs
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"),na = character())
template
basic_template <- tibble(pdfname = pdfs, x = list(template)) |>
unnest(c(x))
basic_template
basic_template
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"),na = character())
template
length(pdfs)
runApp('module/folder_loader.R')
file.exists("prevpath.txt")
prevpath <- read_lines("prevpath.txt")
prevpath
runApp()
prevpath
prevpath
prevpath <- read_lines(here::here("prevpath.txt"))
prevpath
runApp('module/folder_loader.R')
dir()
runApp('module/folder_loader.R')
runApp()
prevpath
selected_pdf()
selected_pdf()
is.null(selected_pdf())
isselected <- tryCatch(selected_pdf(),error=function(e)"error")
runApp()
runApp()
dir
apath <- list.files(dir,pattern="research_matrix_data\\.rds",full.names = TRUE)
apath
read_rds(apath)
runApp()
all_matrix()
selected_pdf()
runApp()
selected_pdf()
runApp()
selected_pdf()
runApp()
runApp()
runApp()
runApp('module/folder_loader.R')
input$directory
file.exists(here::here("prevpath.txt"))
parseDirPath(volumes, input$directory)
parseDirPath(volumes, input$directory)
current_selection <- parseDirPath(volumes, input$directory)
current_selection
runApp('module/folder_loader.R')
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp('module/folder_loader.R')
prevpath
runApp('module/folder_loader.R')
runApp()
runApp()
shiny::runApp()
runApp()

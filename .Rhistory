regex="^___(\\d+)___(.+)_(\\d+)_(.+)$") |>
arrange(pid,cid)
tibble(x = matrix_value_ids, val = input[[matrix_value_ids]]) |>
extract(col=x,
into=c("pid","pname","cid","cname"),
regex="^___(\\d+)___(.+)_(\\d+)_(.+)$") |>
arrange(pid,cid)
matrix_value_ids
mxids <- names(input)[str_detect(names(input),"^___")]
tibble(x = mxids, val = map_chr(mxids,input[[.]])
tibble(x = mxids, val = map_chr(mxids,~input[[.]]))
tibble(x = mxids, val = map_chr(mxids,~input[[.]]))
tibble(x = mxids, val = map_chr(mxids,~input[[.]])) |>
extract(col=x,
into=c("pid","pname","cid","cname"),
regex="^___(\\d+)___(.+)_(\\d+)_(.+)$") |>
arrange(pid,cid)
new_mxdat <<- tibble(x = mxids, val = map_chr(mxids,~input[[.]])) |>
extract(col=x,
into=c("pid","pname","cid","cname"),
regex="^___(\\d+)___(.+)_(\\d+)_(.+)$") |>
arrange(pid,cid)
matrix_contents <- tibble(
pid = as.character(c(1,1,1,2,2,3)),
pname = c("pop","pop","pop","jrn","jrn","title"),
cid   = as.character(c(0,1,2,0,1,0)),
cname = c(".default","gender","age",".default","year",".default"),
val   = c("popdefault value", "pop gender value", "pop age value",
"journal default value", "journal uear value", "title default value")
)
matrix_contents
matrix_contents |>
mutate(id = str_glue("___{pid}___{pname}_{cid}_{val}"))
matrix_contents |>
mutate(id    = str_glue("___{pid}___{pname}_{cid}_{val}")) |>
mutate(input = pmap(list(pname,cid,cname,id,val), ~{
if(..2=="0"){
textAreaInput(ns(..4),label = ..1, value = ..5)
}else{
textInput(ns(..4),label=..3,value=..5)
}
}))
mxc <- matrix_contents |>
mutate(id    = str_glue("___{pid}___{pname}_{cid}_{val}")) |>
mutate(input = pmap(list(pname,cid,cname,id,val), ~{
if(..2=="0"){
textAreaInput(ns(..4),label = ..1, value = ..5)
}else{
textInput(ns(..4),label=..3,value=..5)
}
}))
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
ret
ret |>
select(pid, input) |>
group_by(pid)
ret |>
select(pid, cid, input) |>
group_by(pid)
ret <- ret |>
select(pid, cid, input)
ret
pid <- ret |> filer(cid=="0")
pid
pid <- ret |> filter(cid=="0")
pret <- ret |> filter(cid=="0")
pret
cret <- ret |> filter(cid!="0")
cret
pret
cret
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
mxids <- names(input)[str_detect(names(input),"^___")]
mxids
new_mxdat <- tibble(x = mxids, val = map_chr(mxids,~input[[.]])) |>
extract(col=x,
into=c("pid","pname","cid","cname"),
regex="^___(\\d+)___(.+)_(\\d+)_(.+)$") |>
arrange(pid,cid)
new_mxdat
View(new_mxdat)
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
mxids <- names(input)[str_detect(names(input),"^___")]
mxids
names(input)
matrix_contents
runApp('module/vertical_matrix.R')
mxids <- names(input)[str_detect(names(input),"^___")]
mxids
new_mxdat <- tibble(x = mxids, val = map_chr(mxids,~input[[.]])) |>
extract(col=x,
into=c("pid","pname","cid","cname"),
regex="^___(\\d+)___(.+)_(\\d+)_(.+)$") |>
arrange(pid,cid)
new_mxdat
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
?renderTable
runApp('module/vertical_matrix.R')
xtable::xtable(tibble(a = "hi there and \n this is new"))
xx <- xtable::xtable(tibble(a = "hi there and \n this is new"))
print(xx)
print(xx,sanitize.text.function = identity)
print(xx,sanitize.text.function = NULL)
xx <- xtable::xtable(tibble(a = "hi there and \\n this is new"))
print(xx,sanitize.text.function = identity)
print(xx,sanitize.text.function = NULL)
xx <- xtable::xtable(tibble(a = "hi there and \n this is new"))
print(xx,sanitize.text.function = identity)
print(xx,sanitize.text.function = NULL)
runApp('module/vertical_matrix.R')
temp
View(temp)
temp$val[6]
runApp('module/vertical_matrix.R')
runApp('module/folder_loader.R')
runApp('module/folder_loader.R')
runApp('module/folder_loader.R')
runApp('module/folder_loader.R')
input$directory
dir()
dir()
list.files(dir())
list.files(dir(),"research_matrix_data.rds")
tgtrds <- list.files(dir(),"research_matrix_data.rds")
length(tgtrds)
template <- read_csv("matrix_template.csv")
library(readr)
template <- read_csv("matrix_template.csv")
template
template <- read_csv("matrix_template.csv")
template
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c")
}
browser()
})
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"))
template
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"))
template
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"))
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"))
template
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"))
template
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"),na = character())
template
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"),na = character())
template
template <- read_csv("matrix_template.csv",col_types = cols(.default = "c"),na = character())
template
list.files(dir(),pattern = "pdf$")
pdfs <- list.files(dir(),pattern = "pdf$")
tibble(pdfname = pdfs, x = template)
tibble(pdfname = pdfs, x = list(template))
template
tibble(pdfname = pdfs, x = list(template)) |>
unnest(c(x))
basic_template <- tibble(pdfname = pdfs, x = list(template)) |>
unnest(c(x))
dir()
write_rds(basic_template, str_glue("{dir()}/research_matrix_data.rds"))
runApp('module/folder_loader.R')
runApp('module/folder_loader.R')
runApp('module/folder_loader.R')
runApp('module/folder_loader.R')
source("module/vertical_matrix.R")
source("module/vertical_matrix.R")
source("module/vertical_matrix.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
selected_matrix()
runApp()
runApp()
selected_pdf()
selected_pdf()
dirname(selected_pdf())
dir <- dirname(selected_pdf())
dir <- dirname(selected_pdf())
list.files(dir,pattern="research_matrix_data\\.rds")
read_rds(apath)
apath <- list.files(dir,pattern="research_matrix_data\\.rds",full.names = TRUE)
read_rds(apath)
#make matrix contents from selected pdf
all_matrix <- reactive({
dir <- dirname(selected_pdf())
apath <- list.files(dir,pattern="research_matrix_data\\.rds",full.names = TRUE)
return(read_rds(apath))
})
all_matrix()
selected_pdf()
all_matrix() |>
filter(pdfname == basename(selected_pdf()))
selected_matrix <- reactive({
return(all_matrix() |> filter(pdfname == basename(selected_pdf())))
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
selected_matrix()
vmatrixServer("matrix",selected_matrix())
altered_matrix <- vmatrixServer("matrix",selected_matrix())
altered_matrix()
eee()
runApp('module/vertical_matrix.R')
runApp()
runApp()
runApp()
selected_matrix()
vmatrixServer("matrix",selected_matrix())
runApp()
runApp('temp.R')
runApp('temp.R')
runApp('temp.R')
runApp()
runApp()
runApp()
runApp()
runApp()
altered_matrix()
altered_matrix
altered_matrix()
runApp()
altered_matrix()
a <- altered_matrix()
a <<- altered_matrix()
b <<- altered_matrix()
altered_matrix()
View(a)
all_matrix()
am <-  all_matrix()
View(am)
all_matrix()
altered_matrix()
a
save_this <- all_matrix() |>
anti_join(altered_matrix(), by=c("pdfname","pid","pname","cid","cname")) |>
bind_rows(altered_matrix()) |>
arrange(pdfname, pid, cid)
save_this
selected_pdf()
dirname(selected_pdf())
save_this <- all_matrix() |>
anti_join(altered_matrix(), by=c("pdfname","pid","pname","cid","cname")) |>
bind_rows(altered_matrix()) |>
arrange(pdfname, pid, cid)
save_to <- dirname(selected_pdf()) |>
str_c("/research_matrix_data.rds")
write_rds(save_this,save_to)
runApp()
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
read_rds(r"(C:\Users\ma060\Desktop\pdfs\research_matrix_data.rds)")
matrix_contents <- reactive({
read_rds(r"(C:\Users\ma060\Desktop\pdfs\research_matrix_data.rds)") |>
filter(pdfname == "1.pdf")
})
read_rds(r"(C:\Users\ma060\Desktop\pdfs\research_matrix_data.rds)") |>
filter(pdfname == "1.pdf")
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
current_id <- .
current_id
parent_input <- pret |> filter(pid == current_id) |> pull(input)
parent_input
pret
matrix_contents()
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp()
save_this <- all_matrix() |>
anti_join(altered_matrix(), by=c("pdfname","pid","pname","cid","cname")) |>
bind_rows(altered_matrix()) |>
arrange(pdfname, pid, cid)
save_to <- dirname(selected_pdf()) |>
str_c("/research_matrix_data.rds")
write_rds(save_this,save_to)
runApp()
runApp('module/vertical_matrix.R')
mc_row <- nrow(matrix_contents())
mc_row
ret <- matrix_contents() |>
mutate(id    = str_glue("___{pid}___{pname}_{cid}_{cname}")) |>
mutate(input = pmap(list(pname,cid,cname,id,val), ~{
if(..2=="00"){
textAreaInput(ns(..4),label = ..1, value = ..5)
}else{
textInput(ns(..4),label=..3,value=..5)
}
}))
ret
ret <- ret |>
select(pid, cid, input)
ret
pret <- ret |> filter(cid=="00")
pret
pret
ret
ret
ret <- ret |>
select(pid, cid, input) |>
group_by(pid) |>
mutate(maxcid = max(as.numeric(cid)))
ret
ret |>
filter(cid=="00")
#get shiny inputs for parent textarea and make button for add child
pret <- ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",pid),"+"))
}))
#get shiny inputs for parent textarea and make button for add child
pret <- ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",pid)),"+"))
}))
#get shiny inputs for parent textarea and make button for add child
pret <- ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",pid)),"+"))
}))
#get shiny inputs for parent textarea and make button for add child
pret <- ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",pid)),"+")
}))
pret
#get shiny inputs for child textinput
cret <- ret |> filter(cid!="00")
cret
et
ret
ret <- ret |>
select(pid, cid, input) |>
group_by(pid) |>
mutate(maxcid = max(as.numeric(cid))) |>
ungroup()
#get shiny inputs for parent textarea and make button for add child
pret <- ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",pid)),"+")
}))
ret <- ret |>
select(pid, cid, input) |>
group_by(pid) |>
mutate(maxcid = max(as.numeric(cid))) |>
ungroup()
ret
ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",pid)),"+")
}))
ret |>
filter(cid=="00")
#get shiny inputs for parent textarea and make button for add child
pret <- ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",pid)),"+")
}))
ret |>
filter(cid=="00")
#get shiny inputs for parent textarea and make button for add child
pret <- ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",.)),"+")
}))
pret
#get shiny inputs for child textinput
cret <- ret |> filter(cid!="00")
cret
ret
pret$pid
parent_input <- pret |> filter(pid == current_id) |> pull(input)
current_id <- "001"
parent_input <- pret |> filter(pid == current_id) |> pull(input)
parent_btn   <- pret |> filter(pid == current_id) |> pull(addbtn)
child_input  <- cret |> filter(pid == current_id) |> pull(input)
child_input
parent_btn
parent_input
parent_btn
ret <- ret |>
select(pid, cid, input) |>
group_by(pid)
#get shiny inputs for parent textarea and make button for add child
pret <- ret |>
filter(cid=="00") |>
mutate(addbtn = map(pid, ~{
actionButton(ns(str_c("addbtn",.)),"+")
}))
pret
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
?observeEvent
print("pressed")
runApp('temp.R')
input$btn_one
input$btn_two
runApp('temp.R')
library(shiny); runApp('temp.R')
runApp('temp.R')
reactive({browser()}) |> bindEvent(input$temp)
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
names(input)
x[str_detect(x,"addbtn\\d+")]
x <- names(input)
x[str_detect(x,"addbtn\\d+")]
runApp('module/vertical_matrix.R')
runApp('temp.R')
rv()
1:rv()
tagList(
map(1:rv(),~{
textInput(.,.,.)
}),
actionButton(ns("add"),"+")
)
map(1:rv(),~{
textInput(.,.,.)
})
map(c(1:rv()),~{
textInput(.,.,.)
})
map(c(1:rv()),~{
textInput(str_c("id",.),.,.)
})
runApp('temp.R')
runApp('temp.R')
runApp('temp.R')
runApp('temp.R')
runApp()
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('module/vertical_matrix.R')
runApp('temp.R')
runApp('module/vertical_matrix.R')
runApp()
the_path <- str_c(path_of_rds,"/research_matrix_data.rds")
path_of_rds = r"(C:\Users\ma060\Desktop\pdfs)"
the_path <- str_c(path_of_rds,"/research_matrix_data.rds")
the_path
read_rds(the_path)
dat <- read_rds(the_path) |>
select(pid,pname,cid,cname)
dat
dat <- read_rds(the_path) |>
select(pid,pname,cid,cname) |>
distinct()
dat
dat <- read_rds(the_path) |>
select(pid,pname,cid,cname) |>
distinct() |>
arrange(pid,cid)
dat
dat
dat |>
group_by(pid) |>
nest()
dat |>
group_by(pid) |>
nest() |>
mutate(uis = map2(pid, data, ~{
browser()
}))
x
.x
.y
.x
.y
.x
dat
runApp('module/edit_tag.R')
runApp('module/edit_tag.R')
?selectInput
runApp('module/edit_tag.R')
uidata()
input$ptag
uidata()
uidata() |>
select(pid,pname) |>
distinct()
runApp('module/edit_tag.R')
uidata()
input$ptag
uidata() |>
filter(pid == input$ptag)
